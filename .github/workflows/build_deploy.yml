name: Build and Deploy Artifact
on:
  workflow_call:
    inputs:
      DESTINATION_REPOSITORY:
        type: string
        required: true
      THEME_NAME:
        type: string
        required: true
jobs:
  test_and_build:
    name: Test and Build project
    runs-on: ubuntu-latest
    env:
      node_version: ${{ inputs.NODE_VERSION }}
      php_version: ${{ inputs.PHP_VERSION }}
      composer_version: '2.5.4'
    steps:
      - uses: actions/checkout@v4
      - name: Enable Debug Logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Set THEME_PATH env variable.
        run: |
          export WEBROOT=$(php -r "echo json_decode(file_get_contents('composer.json'), true)['extra']['drupal-scaffold']['locations']['web-root'];")
          echo "THEME_PATH=$WEBROOT/themes/custom/${{ inputs.THEME_NAME }}" >> $GITHUB_ENV
          echo ${{ env.THEME_PATH }}

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.THEME_PATH }}/package-lock.json

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php_version }}
          tools: composer:${{ env.composer_version }}
          extensions: gd, imagick

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.THEME_PATH }}/package-lock.json

      - name: Validate composer.json
        run: |
          composer validate

      - name: Install composer dependencies. # fix why patches won't install
        continue-on-error: true
        run: |
          composer install --prefer-dist --no-progress -o -n

      - name: Clean project.
        run: |
          composer --no-dev update
          rm -rf ${{ env.THEME_PATH }}/node_modules

      - name: Display structure of files
        run: |
          ls -la
          ls -la ${{ env.THEME_PATH }}

      - name: Generate Deployment Artifact
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          mkdir -p /tmp/deploy-artifact
          rsync -a --delete --include='*/' --include='.platform' --include='.platform.app.yaml' --include='.environment' --exclude='.*' $GITHUB_WORKSPACE/ /tmp/deploy-artifact/
          tar -czf deploy-artifact.tar.gz -C /tmp deploy-artifact
          mkdir -p artifacts
          mv deploy-artifact.tar.gz artifacts/

      - name: Upload Deployment Artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: deploy-artifact
          path: artifacts/deploy-artifact.tar.gz

  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs: test_and_build
    env:
      DESTINATION_REPOSITORY_BRANCH: ${{ github.ref_name }}
      TAG: ${{ github.ref_name }}-${{ github.run_number }}
      TAG_MESSAGE: Github Actions build ${{ github.run_number }}
      COMMIT_MESSAGE: Github Actions build ${{ github.run_number }}
      USER_EMAIL: github-actions@github.com
      USER_NAME: github-actions
    steps:
      - name: Enable Debug Logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: unnecessary

      # Ensure variable is formatted like user@host:port
      - name: Append destination repository host key to known_hosts.
        run: |
          git_host=$(echo ${{ inputs.DESTINATION_REPOSITORY }} | sed -n 's/.*@\([^:]*\):.*/\1/p')
          ssh-keyscan -t rsa $git_host >> /root/.ssh/known_hosts
        shell: bash

      - name: Clone the destination repository
        run: git clone ${{ inputs.DESTINATION_REPOSITORY }} .

      - name: Checkout a branch based on the source branch
        run: |
          git config user.name $USER_NAME
          git config user.email $USER_EMAIL
          git checkout $DESTINATION_REPOSITORY_BRANCH || git checkout -B $DESTINATION_REPOSITORY_BRANCH
          git rm -rf .
          git clean -fxd

      - name: Download deploy artifact
        if: ${{ !env.ACT }}
        uses: actions/download-artifact@v4
        with:
          name: deploy-artifact
          path: ${{ runner.temp }}

      - name: Unzip Deploy Artifact into workspace
        run: |
          tar -xf ${{ runner.temp }}/deploy-artifact.tar.gz -C ${{ github.workspace }}
          mv ${{ github.workspace }}/deploy-artifact/* ${{ github.workspace }}
                  if [[ -d "${{ github.workspace }}/deploy-artifact/.platform" ]]; then
            mkdir -p ${{ github.workspace }}/.platform
            mv ${{ github.workspace }}/deploy-artifact/.platform/* ${{ github.workspace }}/.platform/
            echo "Moved .platform"
          else
            echo "File does not exist."
          fi
          
          if [[ -f "${{ github.workspace }}/deploy-artifact/.environment" ]]; then
            mv ${{ github.workspace }}/deploy-artifact/.environment ${{ github.workspace }}/.environment
            echo "Moved .environment"
          else
            echo "File does not exist."
          fi
          
          if [[ -f "${{ github.workspace }}/deploy-artifact/.platform.app.yaml" ]]; then
            mv ${{ github.workspace }}/deploy-artifact/.platform.app.yaml ${{ github.workspace }}/.platform.app.yaml
            echo "Moved .platform.app.yaml"
          else
            echo "File does not exist."
          fi
          rm -rf ${{ github.workspace }}/deploy-artifact

      - name: Create gh_actions settings file
        run: |
          echo "<?php \$settings['deployment_identifier'] = '${TAG}';" > settings.gh_actions.php
          chmod 644 settings.gh_actions.php
          cat settings.gh_actions.php

      - name: Add files to git
        run: git add -A --force

      - name: Create a commit
        run: git commit -m "${COMMIT_MESSAGE}" --no-verify

      # Todo: Only tag if pushing to main branch
      - name: Tag the commit
        run: git tag -a "${TAG}" -m "${TAG_MESSAGE}"

      - name: Push the commit to the destination repository
        run: |
          git config --global push.default current
          git push origin $DESTINATION_REPOSITORY_BRANCH --force
          git push origin $TAG
